services:
  ollama:
    image: 'ollama/ollama:latest'
    container_name: ollama
    working_dir: "/app"
    ports:
      - '8080:11434'
    volumes:
      - ollama:/root/.ollama
      - './ollama/initialize.sh:/app/initialize.sh' # Bind mount to preserve the file inside the container.
    networks:
      - r2r_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
    entrypoint: ["/bin/bash", "/app/initialize.sh"] # Use entrypoint to run the script.
  pgvector:
    image: 'pgvector/pgvector:pg16'
    container_name: pgvector
    environment:
      - 'POSTGRES_DB=r2r'
      - 'POSTGRES_USER=r00t'
      - 'POSTGRES_PASSWORD=t00r'
    ports:
      - '8888:5432'
    restart: unless-stopped
    volumes:
      - 'postgres_data:/var/lib/postgresql/data'
    networks:
      - r2r_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-r00t} -d ${POSTGRES_DB:-r2r}"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      ollama:
        condition: service_started
  unstructured:
    build:
      context: "unstructured"
      dockerfile: "Dockerfile"
    container_name: unstructured
    ports:
      - "7275:7275"
    networks:
      - r2r_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7275/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      pgvector:
        condition: service_started
volumes:
  ollama:
  postgres_data:
networks:
  r2r_network: