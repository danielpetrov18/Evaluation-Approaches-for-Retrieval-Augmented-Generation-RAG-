services:
  ollama:
    image: 'ollama/ollama:latest'
    container_name: ollama
    working_dir: "/app"
    ports:
      - '${OLLAMA_API_BASE_PORT:-11434}:11434'
    volumes:
      - ollama:/root/.ollama
      - './bin/ollama_initialize.sh:/app/initialize.sh'
    networks:
      - r2r_network
    restart: unless-stopped
    entrypoint: ["/bin/bash", "/app/initialize.sh"] # Download models if not already available.
  pgvector:
    image: 'pgvector/pgvector:pg16'
    container_name: pgvector
    environment:
      - POSTGRES_DB=${R2R_POSTGRES_DBNAME}
      - POSTGRES_USER=${R2R_POSTGRES_USER}
      - POSTGRES_PASSWORD=${R2R_POSTGRES_PASSWORD}
    ports:
      - '${R2R_POSTGRES_PORT:-5432}:5432'
    restart: unless-stopped
    volumes:
      - 'postgres_data:/var/lib/postgresql/data'
    networks:
      - r2r_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${R2R_POSTGRES_USER} -d ${R2R_POSTGRES_DBNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
  unstructured:
    build:
      context: "res/unstructured"
      dockerfile: "Dockerfile"
    container_name: unstructured
    ports:
      - "${UNSTRUCTURED_LOCAL_PORT:-7275}:7275"
    networks:
      - r2r_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "${UNSTRUCTURED_LOCAL_URL}/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      pgvector:
        condition: service_started
volumes:
  ollama:
  postgres_data:
networks:
  r2r_network: